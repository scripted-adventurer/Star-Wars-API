{"version":3,"sources":["error.js","starships.js","index.js"],"names":["Error","props","state","visible","this","setTimer","timer","clearTimeout","setTimeout","setState","bind","className","message","React","Component","Starships","error","downloadStarships","downloadPilots","loadPilotNames","starshipName","starshipDropdown","pilotNameRows","nextUrl","starshipData","pilotUrls","Set","pilotInfo","selectStarshipName","fetch","then","response","json","result","starship","pilotUrl","add","allPilotUrls","values","delete","size","Object","pilotEntries","i","length","pilotName","keys","push","value","event","target","getStarships","getPilotNames","updatePilotInfo","loadStarshipDropdown","Fragment","htmlFor","id","name","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55ed1322.chunk.js","sourcesContent":["import React from 'react';\nimport './error.css';\n\nexport class Error extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {visible: true};\n  }\n  componentDidMount() {\n    this.setTimer();\n  }\n  setTimer() {\n    // hide error box after 5 seconds\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n    this.timer = setTimeout(function() {\n      this.setState({visible: false});\n    }.bind(this), 5000);\n  }\n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n  render() {\n    if (this.state.visible) {\n      return (<div className=\"error-message\">ERROR<br />\n        {this.props.message}</div>);\n    }\n    else {\n      return null;\n    }\n  }\n}","import React from \"react\";\nimport {Error} from \"./error\";\nimport \"./starships.css\";\n\n\nexport class Starships extends React.Component {\n  // Pulls a list of all available starships from the Star Wars API,\n  // then pulls the pilot name for each pilot URL and loads a dropdown with \n  // each starship name.\n  // When a starship is selected, loads a table of all pilot names for that \n  // starship.  \n  constructor(props) {\n    super(props);\n    this.state = {error: null, downloadStarships: false, \n      downloadPilots: false, loadPilotNames: false, starshipName: null, \n      starshipDropdown: null, \n      pilotNameRows: <tr><td>Loading...</td></tr>};\n    this.nextUrl = \"https://swapi.dev/api/starships/\";\n    this.starshipData = {};\n    this.pilotUrls = new Set();\n    this.pilotInfo = {};\n    this.selectStarshipName = this.selectStarshipName.bind(this);\n  }\n  getStarships() { \n    // Download all starship names and associated pilot URLs from the \n    // /starships endpoint.\n    if (this.nextUrl != null) {\n      fetch(this.nextUrl)\n        .then(response => response.json())\n        .then(\n          (result) => {\n            for (const starship of result[\"results\"]) {\n              (this.starshipData[starship[\"name\"]] = \n                starship[\"pilots\"]);\n              for (const pilotUrl of starship[\"pilots\"]) {\n                this.pilotUrls.add(pilotUrl);\n              }\n            }\n            this.nextUrl = result[\"next\"];\n            if (this.nextUrl != null) {\n              this.setState({\n                downloadStarships: true\n              });\n            }\n            else {\n              this.setState({\n                downloadStarships: false,\n                downloadPilots: true\n              });\n            }\n          },\n          (error) => {\n            this.setState({\n              error: error.message,\n              downloadStarships: false\n            });\n          }\n        )\n    }\n  }\n  getPilotNames() {\n    // Find the pilot name associated with each pilot URL.\n    const allPilotUrls = this.pilotUrls.values();\n    for (const pilotUrl of allPilotUrls) {\n      fetch(pilotUrl)\n        .then(response => response.json())\n        .then(\n          (result) => {\n            this.pilotInfo[pilotUrl] = result[\"name\"];\n            this.pilotUrls.delete(pilotUrl);\n            if (this.pilotUrls.size === 0) {\n              this.setState({\n                downloadPilots: false\n              });\n            }\n          },\n          (error) => {\n            this.setState({\n              error: error.message,\n              downloadPilots: false\n            });\n            this.pilotInfo[pilotUrl] = \"Unknown\";\n            this.pilotUrls.delete(pilotUrl);\n          }\n      )\n    }\n  }\n  updatePilotInfo() {\n    // Replace each pilot URL in the starship data with its associated name.\n    for (const pilotEntries of Object.values(this.starshipData)) {\n      for (let i = 0; i < pilotEntries.length; i++) {\n        const pilotUrl = pilotEntries[i];\n        const pilotName = this.pilotInfo[pilotUrl];\n        pilotEntries[i] = pilotName;\n      }\n    }\n  }\n  loadStarshipDropdown() {\n    // Load all the starship names into the form dropdown.\n    let starshipDropdown = [];\n    for (const starshipName of Object.keys(this.starshipData)) {\n      starshipDropdown.push(\n        <option value={starshipName} key={starshipName}>{starshipName}\n        </option>\n      );\n    }\n    this.setState({\n      starshipDropdown: starshipDropdown,\n      pilotNameRows: null\n    });\n  }\n  selectStarshipName(event) {\n    // Handle changes made in the Starship Name select dropdown.\n    const target = event.target;\n    const value = target.value;\n    this.setState({\n      starshipName: value,\n      loadPilotNames: true\n    });\n  }\n  loadPilotNames() {\n    // Display all pilot names associated with the selected starship name \n    // in a table. \n    let pilotNameRows = [];\n    if (this.starshipData[this.state.starshipName].length === 0) {\n      pilotNameRows.push(\n        <tr key=\"1\"><td>No pilots found!</td></tr>\n      );\n    }\n    for (const pilotName of this.starshipData[this.state.starshipName]) {\n      pilotNameRows.push(\n        <tr key={pilotName}><td>{pilotName}</td></tr>\n      );\n    }\n    this.setState({\n      pilotNameRows: pilotNameRows,\n      loadPilotNames: false\n    });\n  }\n  componentDidMount() {\n    this.getStarships();\n  }\n  componentDidUpdate() {\n    if (this.state.downloadStarships) {\n      this.getStarships();\n    }\n    if (this.state.downloadPilots) {\n      this.getPilotNames();\n    }\n    if (this.pilotUrls.size === 0 && this.state.starshipDropdown === null) {\n      this.updatePilotInfo();\n      this.loadStarshipDropdown();\n    }\n    if (this.state.loadPilotNames) {\n      this.loadPilotNames();\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n      <p className=\"title\">Star Wars Starship Pilots</p>\n      <form className=\"starship-select\">\n      <p><label htmlFor=\"starshipName\">Starship:&nbsp;\n      <select id=\"starshipName\" name=\"starshipName\" \n        onChange={this.selectStarshipName}>\n        <option value=\"\" key=\"\"></option>\n        {this.state.starshipDropdown}\n      </select>\n      </label></p>\n      </form>\n      <table id=\"pilot-table\">\n        <tbody>\n        {this.state.pilotNameRows}\n        </tbody>\n      </table>\n      {this.state.error && <Error message={this.state.error} />}\n      </React.Fragment>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Starships} from './starships';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Starships />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}